#!/usr/bin/env python
from __future__ import unicode_literals
import os
import sys
import re
import time
import logging
import traceback
from argparse import ArgumentParser
try:
    from jinja2 import Environment, FileSystemLoader
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler
except ImportError:
    print("Missing required packages!")
    print("Please install `jinja2` and `watchdog` packages. You can install them with `pip`:")
    print("\n\tpip install jinja2 watchdog")
    exit()

logging.basicConfig(level='INFO', format='%(asctime)s %(message)s')

OUTFILE = 'airshell.sh'
REMOVE_COMMENT_RE = re.compile(r'^\s*#(?![!]).*', re.M)
REMOVE_MULTI_LF_RE = re.compile(r'(?:\n\s*)+\n')
GENERATE_WARNING = u'This file was automatically generated by build script. Do not modify! ##'
context = {}
context.update(os.environ)
context.update(dict(generate_warning=GENERATE_WARNING))


class WrappingFileSystemLoader(FileSystemLoader):
    def __init__(self, sourcepath, encoding='utf-8', debug=False, **kwargs):
        FileSystemLoader.__init__(self, sourcepath, encoding, **kwargs)
        self.debug = debug

    def get_source(self, env, template):
        content, filename, uptodate = FileSystemLoader.get_source(self, env, template)

        ## A bit of a hack, as we dont want to wrap entry file (main.sh)
        if self.debug:
            if filename != 'source/main.sh':
                content = u"\n#--- BEGIN '%s' ---\n%s\n#--- END '%s' ---\n\n" % (filename, content.strip(), filename)
        else:
            content = u"%s\n\n" % content.strip()

        return (content, filename, uptodate)


class FileSystemChangeHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        logging.info(u"Change detected in '%s' (%s)" % (event.src_path, event.event_type))
        try:
            build()
        except Exception as e:
            traceback.print_exc()

parser = ArgumentParser()
parser.add_argument('-d','--debug',   dest='debug',   action='store_true', default=False)
parser.add_argument('-w','--watch',   dest='watch',   action='store_true', default=False)
parser.add_argument('-c','--compact', dest='compact', action='store_true', default=False)
options = parser.parse_args()

env = Environment(loader=WrappingFileSystemLoader('source', 'utf-8', debug=options.debug),
                    trim_blocks=True,
                    autoescape=False,
                    line_statement_prefix='%',
                    comment_start_string='#[[',
                    comment_end_string=']]#',
                    extensions=['jinja2.ext.do'])

def build():
    template = env.get_template('main.sh')

    with open(OUTFILE, 'w') as out:
        rendered = template.render(**context)
        if options.compact:
            rendered = re.sub(REMOVE_COMMENT_RE, "", rendered)
            rendered = re.sub(REMOVE_MULTI_LF_RE, "\n", rendered)
        out.write(rendered)

build()

if options.watch:
    print ('Watching for changes... (Ctrl+C to stop)')
    handler = FileSystemChangeHandler()
    observer = Observer()
    observer.schedule(handler, 'source', recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
